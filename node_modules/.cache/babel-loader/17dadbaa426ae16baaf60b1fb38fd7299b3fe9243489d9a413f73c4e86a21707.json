{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport logo from './logo.svg';\nimport Form from 'react-bootstrap/Form';\nimport { useState, React } from 'react';\nimport { distinctiveFeatures } from './distinctiveFeatures.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst features = [\"syllabic\", \"sonorant\", \"consonantal\", \"continuant\", \"nasal\", \"anterior\", \"coronal\", \"lateral\", \"voice\"];\nconst stringSplitter = /\\,|\\.|\\/|\\|/;\nfunction App() {\n  _s();\n  const [segmentSetA, setSegmentSetA] = useState([]);\n  const [segmentSetB, setSegmentSetB] = useState([]);\n  function handleSetChange(setInputText, setID) {\n    // disregard empty strings or segments not accounted for\n    let validSegments = [];\n    for (let segment of setInputText.split(stringSplitter).map(s => s.trim())) {\n      if (segment && segment in distinctiveFeatures) {\n        validSegments.push(segment);\n      }\n    }\n    if (setID == \"A\") {\n      setSegmentSetA(validSegments);\n    } else if (setID == \"B\") {\n      setSegmentSetB(validSegments);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Distinctive features\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"set-form\",\n        children: [/*#__PURE__*/_jsxDEV(SegmentSelector, {\n          setID: \"A\",\n          changeHandler: handleSetChange,\n          selectedSegments: segmentSetA\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SegmentDisplayer, {\n          segments: segmentSetA\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"set-form\",\n        children: [/*#__PURE__*/_jsxDEV(SegmentSelector, {\n          setID: \"B\",\n          changeHandler: handleSetChange,\n          selectedSegments: segmentSetB\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SegmentDisplayer, {\n          segments: segmentSetB\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DifferenceDisplayer, {\n        setA: segmentSetA,\n        setB: segmentSetB\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cAJWBoCpnkQ8vfGxurzgRZ84ew0=\");\n_c = App;\nfunction checkForInvalidSegments(segments) {\n  if (!segments) {\n    return [false, []];\n  }\n  let invalidSegments = [];\n  for (let segment of segments) {\n    if (segment != \"\" && !segment in distinctiveFeatures) {\n      invalidSegments.push(segment);\n    }\n  }\n  if (invalidSegments.length == 0) {\n    return [false, []];\n  }\n  return [true, invalidSegments];\n}\nfunction SegmentSelector(_ref) {\n  _s2();\n  let {\n    setID,\n    changeHandler,\n    selectedSegments\n  } = _ref;\n  const [containsInvalidSegments, setContainsInvalidSegments] = useState(false);\n  const [invalidSegments, setInvalidSegments] = useState([]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    validated: containsInvalidSegments,\n    children: /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [\"Set \", setID]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        size: \"lg\",\n        placeholder: \"e.g. m, n, \\u014B\",\n        onChange: e => {\n          changeHandler(e.target.value, setID);\n          const [contains, s] = checkForInvalidSegments(e.target.value);\n          setContainsInvalidSegments(contains);\n          setContainsInvalidSegments(s);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), selectedSegments.length == 0 && /*#__PURE__*/_jsxDEV(Form.Text, {\n        children: \"Enter IPA segments separated by punctuation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n        type: \"invalid\",\n        children: [\"The following segment(s) are not recognised:\", invalidSegments.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s2(SegmentSelector, \"fpBR5Ewa17XIGk3eoTaKxYgy9qo=\");\n_c2 = SegmentSelector;\nfunction getCommonFeatures(segments) {\n  let commonFeatureValues = {};\n  for (let feature of features) {\n    const values = new Set();\n    for (let segment of segments) {\n      values.add(distinctiveFeatures[segment][feature]);\n    }\n    if (values.size == 1) {\n      commonFeatureValues[feature] = values.values().next().value;\n    }\n  }\n  return commonFeatureValues;\n}\nfunction SegmentDisplayer(_ref2) {\n  let {\n    segments\n  } = _ref2;\n  if (segments.length == 0) {\n    return;\n  }\n  const commonFeatureValues = getCommonFeatures(segments);\n  if (Object.keys(commonFeatureValues).length == 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"These segments have no features in common!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Common features include:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.keys(commonFeatureValues).map(k => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: commonFeatureValues[k] + k\n      }, k, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 51\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_c3 = SegmentDisplayer;\nfunction DifferenceDisplayer(_ref3) {\n  let {\n    setA,\n    setB\n  } = _ref3;\n  if (setA.length == 0 && setB.length == 0) {\n    return;\n  }\n  if (setA.length > 0 && setB.length > 0) {\n    const commonFeatureValuesA = getCommonFeatures(setA);\n    const commonFeatureValuesB = getCommonFeatures(setB);\n    if (Object.keys(commonFeatureValuesA).length > 0 && Object.keys(commonFeatureValuesA).length > 0) {\n      let differences = [];\n      let uniques = [];\n      for (let feature of Object.keys(commonFeatureValuesA)) {\n        if (feature in commonFeatureValuesB && commonFeatureValuesB[feature] != commonFeatureValuesA[feature]) {\n          differences.push(feature);\n        }\n        if (!(feature in commonFeatureValuesB)) {\n          uniques.push({\n            \"feature\": feature,\n            \"value\": commonFeatureValuesA[feature]\n          });\n        }\n      }\n      if (differences.length > 0) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Features distinguishing set A from set B:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: differences.map(d => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: d\n            }, d, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this);\n      }\n      if (uniques.length > 0) {\n        // count how important each unique is\n        let featureExclusions = {};\n        for (let feature of uniques) {\n          // count how many segments in B that this feature of A rules out\n          let exclusions = [];\n          for (let segment of setB) {\n            if (distinctiveFeatures[segment][feature[\"feature\"]] != feature[\"value\"]) {\n              exclusions.push(segment);\n            }\n          }\n          featureExclusions[feature[\"feature\"]] = exclusions.slice();\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Common features of A that are not common to B:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: uniques.map(x => {\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: x[\"value\"] + x[\"feature\"] + \" (distinguishes A from \" + featureExclusions[x[\"feature\"]].length + \" segment\" + (featureExclusions[x[\"feature\"]].length > 1 ? \"s\" : \"\") + \" in B)\"\n              }, x[\"feature\"], false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No features distinguish these two sets of segments.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n_c4 = DifferenceDisplayer;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"SegmentSelector\");\n$RefreshReg$(_c3, \"SegmentDisplayer\");\n$RefreshReg$(_c4, \"DifferenceDisplayer\");","map":{"version":3,"names":["logo","Form","useState","React","distinctiveFeatures","jsxDEV","_jsxDEV","features","stringSplitter","App","_s","segmentSetA","setSegmentSetA","segmentSetB","setSegmentSetB","handleSetChange","setInputText","setID","validSegments","segment","split","map","s","trim","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","SegmentSelector","changeHandler","selectedSegments","SegmentDisplayer","segments","DifferenceDisplayer","setA","setB","_c","checkForInvalidSegments","invalidSegments","length","_ref","_s2","containsInvalidSegments","setContainsInvalidSegments","setInvalidSegments","validated","Group","Label","Control","type","size","placeholder","onChange","e","target","value","contains","Text","Feedback","join","_c2","getCommonFeatures","commonFeatureValues","feature","values","Set","add","next","_ref2","Object","keys","k","_c3","_ref3","commonFeatureValuesA","commonFeatureValuesB","differences","uniques","d","featureExclusions","exclusions","slice","x","_c4","$RefreshReg$"],"sources":["/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport Form from 'react-bootstrap/Form';\nimport { useState, React} from 'react';\nimport { distinctiveFeatures } from './distinctiveFeatures.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst features = [\n  \"syllabic\",\n  \"sonorant\",\n  \"consonantal\",\n  \"continuant\",\n  \"nasal\",\n  \"anterior\",\n  \"coronal\",\n  \"lateral\",\n  \"voice\",\n]\n\nconst stringSplitter = /\\,|\\.|\\/|\\|/;\n\nfunction App() {\n  const [segmentSetA, setSegmentSetA] = useState([]);\n  const [segmentSetB, setSegmentSetB] = useState([]);\n  function handleSetChange(setInputText, setID) {\n    // disregard empty strings or segments not accounted for\n    let validSegments = [];\n    for (let segment of setInputText.split(stringSplitter).map(s => s.trim())) {\n      if (segment && segment in distinctiveFeatures) {\n        validSegments.push(segment);\n      }\n    }\n    if (setID == \"A\") {\n      setSegmentSetA(validSegments)\n    } else if (setID == \"B\") {\n      setSegmentSetB(validSegments)\n    }\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"app-content\">\n        <h1>Distinctive features</h1>\n        <div className=\"set-form\">\n          <SegmentSelector setID=\"A\" changeHandler={handleSetChange} selectedSegments={segmentSetA}/>\n          <SegmentDisplayer segments={segmentSetA}/>\n        </div>\n        <div className=\"set-form\">\n          <SegmentSelector setID=\"B\" changeHandler={handleSetChange} selectedSegments={segmentSetB}/>\n          <SegmentDisplayer segments={segmentSetB}/>\n        </div>\n        <DifferenceDisplayer setA={segmentSetA} setB={segmentSetB}/>\n      </div>\n    </div>\n  );\n}\n\nfunction checkForInvalidSegments(segments) {\n  if (! segments) {\n    return [false, []]\n  }\n  let invalidSegments = [];\n  for (let segment of segments) {\n    if (segment != \"\" && ! segment in distinctiveFeatures) {\n      invalidSegments.push(segment);\n    }\n  }\n  if (invalidSegments.length == 0) {\n    return [false, []]\n  }\n  return [true, invalidSegments]\n}\n\nfunction SegmentSelector( { setID, changeHandler, selectedSegments }) {\n  const [containsInvalidSegments, setContainsInvalidSegments] = useState(false);\n  const [invalidSegments, setInvalidSegments] = useState([]);\n  return (\n    <Form validated={containsInvalidSegments}>\n      <Form.Group>\n        <Form.Label>Set {setID}</Form.Label>\n        <Form.Control\n          type=\"text\"\n          size=\"lg\"\n          placeholder=\"e.g. m, n, ŋ\"\n          onChange={e => {\n            changeHandler(e.target.value, setID);\n            const [contains, s] = checkForInvalidSegments(e.target.value);\n            setContainsInvalidSegments(contains);\n            setContainsInvalidSegments(s);\n          }}\n          />\n        {\n          selectedSegments.length == 0 &&\n          <Form.Text>\n            Enter IPA segments separated by punctuation\n          </Form.Text>\n        }\n        <Form.Control.Feedback type=\"invalid\">\n          The following segment(s) are not recognised:\n          {invalidSegments.join(\", \")}\n        </Form.Control.Feedback>\n      </Form.Group>\n    </Form>\n  )\n}\n\nfunction getCommonFeatures(segments) {\n  let commonFeatureValues = {};\n  for (let feature of features) {\n    const values = new Set();\n    for (let segment of segments) {\n      values.add(distinctiveFeatures[segment][feature])\n    }\n    if (values.size == 1) {\n      commonFeatureValues[feature] = values.values().next().value;\n    }\n  }\n  return commonFeatureValues;\n}\n\nfunction SegmentDisplayer( { segments }) {\n  if (segments.length == 0) {\n    return\n  }\n  const commonFeatureValues = getCommonFeatures(segments);\n  if (Object.keys(commonFeatureValues).length == 0) {\n    return (\n      <div>\n        These segments have no features in common!\n      </div>\n    )\n  }\n  return (\n    <div>\n      Common features include:\n      <ul>\n      {\n        Object.keys(commonFeatureValues).map(k => <li key={k}>{commonFeatureValues[k] + k}</li>)\n      }\n      </ul>\n    </div>\n  )\n}\n\nfunction DifferenceDisplayer( { setA, setB }) {\n  if (setA.length == 0 && setB.length == 0) {\n    return\n  }\n  if (setA.length > 0 && setB.length > 0) {\n    const commonFeatureValuesA = getCommonFeatures(setA);\n    const commonFeatureValuesB = getCommonFeatures(setB);\n    if (Object.keys(commonFeatureValuesA).length > 0 && Object.keys(commonFeatureValuesA).length > 0) {\n      let differences = [];\n      let uniques = [];\n      for (let feature of Object.keys(commonFeatureValuesA)) {\n        if (feature in commonFeatureValuesB && commonFeatureValuesB[feature] != commonFeatureValuesA[feature]) {\n          differences.push(feature);\n        }\n        if (!(feature in commonFeatureValuesB)) {\n          uniques.push({\"feature\" : feature, \"value\" : commonFeatureValuesA[feature]});\n        }\n      }\n      if (differences.length > 0) {\n        return (\n          <div>\n            Features distinguishing set A from set B:\n            <ul>\n              {differences.map(d => <li key={d}>{d}</li>)}\n            </ul>\n          </div>\n        )\n      }\n      if (uniques.length > 0) {\n        // count how important each unique is\n        let featureExclusions = {};\n        for (let feature of uniques) {\n          // count how many segments in B that this feature of A rules out\n          let exclusions = [];\n          for (let segment of setB) {\n            if (distinctiveFeatures[segment][feature[\"feature\"]] != feature[\"value\"]) {\n              exclusions.push(segment);\n            }\n          }\n          featureExclusions[feature[\"feature\"]] = exclusions.slice();\n        }\n        return (\n          <div>\n            Common features of A that are not common to B:\n            <ul>\n              {uniques.map(x => {\n                return (\n                  <li key={x[\"feature\"]}>\n                    {x[\"value\"] + x[\"feature\"] + \" (distinguishes A from \" + featureExclusions[x[\"feature\"]].length + \" segment\" + (featureExclusions[x[\"feature\"]].length > 1? \"s\" : \"\") + \" in B)\"}\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        )\n      }\n    }\n  }\n  return (\n    <div>No features distinguish these two sets of segments.</div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}