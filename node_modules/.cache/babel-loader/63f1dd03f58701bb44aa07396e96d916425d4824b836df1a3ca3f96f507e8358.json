{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport Form from 'react-bootstrap/Form';\nimport { useState, React } from 'react';\nimport { distinctiveFeatures } from './distinctiveFeatures.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst features = [\"syllabic\", \"sonorant\", \"consonantal\", \"continuant\", \"nasal\", \"anterior\", \"coronal\", \"lateral\", \"voice\"];\nfunction App() {\n  _s();\n  const [segmentSetA, setSegmentSetA] = useState([]);\n  const [segmentSetB, setSegmentSetB] = useState([]);\n  function handleSetChange(setInputText, setID) {\n    // disregard empty strings or segments not accounted for\n    let validSegments = [];\n    for (let segment of setInputText.split(\",\")) {\n      if (segment && segment in distinctiveFeatures) {\n        validSegments.push(segment);\n      }\n    }\n    if (setID == \"A\") {\n      setSegmentSetA(validSegments);\n    } else if (setID == \"B\") {\n      setSegmentSetB(validSegments);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SegmentSelector, {\n      setID: \"A\",\n      changeHandler: handleSetChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SegmentDisplayer, {\n      segments: segmentSetA\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SegmentSelector, {\n      setID: \"B\",\n      changeHandler: handleSetChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SegmentDisplayer, {\n      segments: segmentSetB\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DifferenceDisplayer, {\n      setA: segmentSetA,\n      setB: segmentSetB\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cAJWBoCpnkQ8vfGxurzgRZ84ew0=\");\n_c = App;\nfunction SegmentSelector(_ref) {\n  let {\n    setID,\n    changeHandler\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: [\"Set \", setID]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"text\",\n      onChange: e => changeHandler(e.target.value, setID)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_c2 = SegmentSelector;\nfunction getCommonFeatures(segments) {\n  let commonFeatureValues = {};\n  for (let feature of features) {\n    const values = new Set();\n    for (let segment of segments) {\n      values.add(distinctiveFeatures[segment][feature]);\n    }\n    if (values.size == 1) {\n      commonFeatureValues[feature] = values.values().next().value;\n    }\n  }\n  return commonFeatureValues;\n}\nfunction SegmentDisplayer(_ref2) {\n  let {\n    segments\n  } = _ref2;\n  if (segments.length == 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No (valid) segments entered yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n  const commonFeatureValues = getCommonFeatures(segments);\n  if (Object.keys(commonFeatureValues).length == 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"These segments have no features in common!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Common features include:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.keys(commonFeatureValues).map(k => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: commonFeatureValues[k] + k\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 51\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_c3 = SegmentDisplayer;\nfunction DifferenceDisplayer(_ref3) {\n  let {\n    setA,\n    setB\n  } = _ref3;\n  if (setA.length > 0 && setB.length > 0) {\n    const commonFeatureValuesA = getCommonFeatures(setA);\n    const commonFeatureValuesB = getCommonFeatures(setB);\n    if (Object.keys(commonFeatureValuesA).length > 0 && Object.keys(commonFeatureValuesA).length > 0) {\n      let differences = [];\n      let uniques = [];\n      for (let feature of Object.keys(commonFeatureValuesA)) {\n        if (feature in commonFeatureValuesB && commonFeatureValuesB[feature] != commonFeatureValuesA[feature]) {\n          differences.push(feature);\n        }\n        if (!(feature in commonFeatureValuesB)) {\n          uniques.push({\n            \"feature\": feature,\n            \"value\": commonFeatureValuesA[feature]\n          });\n        }\n      }\n      if (differences.length > 0) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Distinguishing features: \", differences.join(\", \"), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 63\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this);\n      }\n      // count how important each unique is\n      let featureExclusions = {};\n      for (let feature of uniques) {\n        // count how many segments in B that this feature of A rules out\n        let exclusions = [];\n        for (let segment of setB) {\n          if (distinctiveFeatures[segment][feature[\"feature\"]] != feature[\"value\"]) {\n            exclusions.push(segment);\n          }\n        }\n        featureExclusions[feature[\"feature\"]] = exclusions.slice();\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Unique features of A that are not common to B: \", uniques.map(x => x[\"value\"] + x[\"feature\"]).join(\", \"), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 115\n        }, this), \"Number of segments each unique feature excludes:\", Object.keys(featureExclusions).map(k => k + \": \" + featureExclusions[k].length).join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No features distinguish these two sets of segments.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_c4 = DifferenceDisplayer;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"SegmentSelector\");\n$RefreshReg$(_c3, \"SegmentDisplayer\");\n$RefreshReg$(_c4, \"DifferenceDisplayer\");","map":{"version":3,"names":["logo","Form","useState","React","distinctiveFeatures","jsxDEV","_jsxDEV","features","App","_s","segmentSetA","setSegmentSetA","segmentSetB","setSegmentSetB","handleSetChange","setInputText","setID","validSegments","segment","split","push","className","children","SegmentSelector","changeHandler","fileName","_jsxFileName","lineNumber","columnNumber","SegmentDisplayer","segments","DifferenceDisplayer","setA","setB","_c","_ref","Group","Label","Control","type","onChange","e","target","value","_c2","getCommonFeatures","commonFeatureValues","feature","values","Set","add","size","next","_ref2","length","Object","keys","map","k","_c3","_ref3","commonFeatureValuesA","commonFeatureValuesB","differences","uniques","join","featureExclusions","exclusions","slice","x","_c4","$RefreshReg$"],"sources":["/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport Form from 'react-bootstrap/Form';\nimport { useState, React} from 'react';\nimport { distinctiveFeatures } from './distinctiveFeatures.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst features = [\n  \"syllabic\",\n  \"sonorant\",\n  \"consonantal\",\n  \"continuant\",\n  \"nasal\",\n  \"anterior\",\n  \"coronal\",\n  \"lateral\",\n  \"voice\",\n]\n\nfunction App() {\n  const [segmentSetA, setSegmentSetA] = useState([]);\n  const [segmentSetB, setSegmentSetB] = useState([]);\n  function handleSetChange(setInputText, setID) {\n    // disregard empty strings or segments not accounted for\n    let validSegments = [];\n    for (let segment of setInputText.split(\",\")) {\n      if (segment && segment in distinctiveFeatures) {\n        validSegments.push(segment);\n      }\n    }\n    if (setID == \"A\") {\n      setSegmentSetA(validSegments)\n    } else if (setID == \"B\") {\n      setSegmentSetB(validSegments)\n    }\n\n  }\n  return (\n    <div className=\"App\">\n      <SegmentSelector setID=\"A\" changeHandler={handleSetChange}/>\n      <SegmentDisplayer segments={segmentSetA}/>\n      <SegmentSelector setID=\"B\" changeHandler={handleSetChange}/>\n      <SegmentDisplayer segments={segmentSetB}/>\n      <DifferenceDisplayer setA={segmentSetA} setB={segmentSetB}/>\n    </div>\n  );\n}\n\nfunction SegmentSelector( { setID, changeHandler }) {\n  return (\n    <Form.Group>\n      <Form.Label>Set {setID}</Form.Label>\n      <Form.Control type=\"text\" onChange={e => changeHandler(e.target.value, setID)}/>\n    </Form.Group>\n  )\n}\n\nfunction getCommonFeatures(segments) {\n  let commonFeatureValues = {};\n  for (let feature of features) {\n    const values = new Set();\n    for (let segment of segments) {\n      values.add(distinctiveFeatures[segment][feature])\n    }\n    if (values.size == 1) {\n      commonFeatureValues[feature] = values.values().next().value;\n    }\n  }\n  return commonFeatureValues;\n}\n\nfunction SegmentDisplayer( { segments }) {\n  if (segments.length == 0) {\n    return (\n      <div>\n        No (valid) segments entered yet.\n      </div>\n    )\n  }\n  const commonFeatureValues = getCommonFeatures(segments);\n  if (Object.keys(commonFeatureValues).length == 0) {\n    return (\n      <div>\n        These segments have no features in common!\n      </div>\n    )\n  }\n  return (\n    <div>\n      Common features include:\n      <ul>\n      {\n        Object.keys(commonFeatureValues).map(k => <li>{commonFeatureValues[k] + k}</li>)\n      }\n      </ul>\n    </div>\n  )\n}\n\nfunction DifferenceDisplayer( { setA, setB }) {\n  if (setA.length > 0 && setB.length > 0) {\n    const commonFeatureValuesA = getCommonFeatures(setA);\n    const commonFeatureValuesB = getCommonFeatures(setB);\n    if (Object.keys(commonFeatureValuesA).length > 0 && Object.keys(commonFeatureValuesA).length > 0) {\n      let differences = [];\n      let uniques = [];\n      for (let feature of Object.keys(commonFeatureValuesA)) {\n        if (feature in commonFeatureValuesB && commonFeatureValuesB[feature] != commonFeatureValuesA[feature]) {\n          differences.push(feature);\n        }\n        if (!(feature in commonFeatureValuesB)) {\n          uniques.push({\"feature\" : feature, \"value\" : commonFeatureValuesA[feature]});\n        }\n      }\n      if (differences.length > 0) {\n        return (\n          <div>\n            Distinguishing features: {differences.join(\", \")}.<br/>\n          </div>\n        )\n      }\n      // count how important each unique is\n      let featureExclusions = {};\n      for (let feature of uniques) {\n        // count how many segments in B that this feature of A rules out\n        let exclusions = [];\n        for (let segment of setB) {\n          if (distinctiveFeatures[segment][feature[\"feature\"]] != feature[\"value\"]) {\n            exclusions.push(segment);\n          }\n        }\n        featureExclusions[feature[\"feature\"]] = exclusions.slice();\n      }\n      return (\n        <div>\n          Unique features of A that are not common to B: {uniques.map(x => x[\"value\"] + x[\"feature\"]).join(\", \")}.<br/>\n          Number of segments each unique feature excludes:\n          {Object.keys(featureExclusions).map(k => k + \": \" + featureExclusions[k].length).join(\", \")}\n        </div>\n      )\n    }\n  }\n  return (\n    <div>No features distinguish these two sets of segments.</div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}