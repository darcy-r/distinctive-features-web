{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport logo from './logo.svg';\nimport Form from 'react-bootstrap/Form';\nimport { useState, React } from 'react';\nimport { distinctiveFeatures } from './distinctiveFeatures.js';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst features = [\"syllabic\", \"sonorant\", \"consonantal\", \"continuant\", \"nasal\", \"anterior\", \"coronal\", \"lateral\", \"voice\"];\nconst stringSplitter = /\\,|\\.|\\/|\\|/;\nfunction App() {\n  _s();\n  const [segmentSetA, setSegmentSetA] = useState([]);\n  const [segmentSetB, setSegmentSetB] = useState([]);\n  function handleSetChange(setInputText, setID) {\n    // disregard empty strings or segments not accounted for\n    let validSegments = [];\n    for (let segment of setInputText.split(stringSplitter).map(s => s.trim())) {\n      if (segment && segment in distinctiveFeatures) {\n        validSegments.push(segment);\n      }\n    }\n    if (setID == \"A\") {\n      setSegmentSetA(validSegments);\n    } else if (setID == \"B\") {\n      setSegmentSetB(validSegments);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"app-content\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Distinctive features\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          defaultActiveKey: \"segments\",\n          id: \"uncontrolled-tab-example\",\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            eventKey: \"segments\",\n            title: \"features of segments\",\n            children: [/*#__PURE__*/_jsxDEV(DifferenceDisplayer, {\n              setA: segmentSetA,\n              setB: segmentSetB\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Container, {\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  xs: 12,\n                  md: 6,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"set-form\",\n                    children: [/*#__PURE__*/_jsxDEV(SegmentSelector, {\n                      setID: \"A\",\n                      changeHandler: handleSetChange,\n                      selectedSegments: segmentSetA\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 61,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(SegmentDisplayer, {\n                      segments: segmentSetA\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 62,\n                      columnNumber: 19\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 60,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  xs: 12,\n                  md: 6,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"set-form\",\n                    children: [/*#__PURE__*/_jsxDEV(SegmentSelector, {\n                      setID: \"B\",\n                      changeHandler: handleSetChange,\n                      selectedSegments: segmentSetB\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 67,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(SegmentDisplayer, {\n                      segments: segmentSetB\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 68,\n                      columnNumber: 19\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 66,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            eventKey: \"features\",\n            title: \"natural classes\",\n            children: [\"Something else will go here.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"switch\",\n              id: \"custom-switch\",\n              label: \"syllabic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cAJWBoCpnkQ8vfGxurzgRZ84ew0=\");\n_c = App;\nfunction checkForInvalidSegments(segments) {\n  if (!segments) {\n    return [false, []];\n  }\n  let invalidSegments = [];\n  for (let segment of segments) {\n    if (segment != \"\" && !(segment in distinctiveFeatures)) {\n      invalidSegments.push(segment);\n    }\n  }\n  if (invalidSegments.length == 0) {\n    return [false, []];\n  }\n  return [true, invalidSegments];\n}\nfunction SegmentSelector(_ref) {\n  _s2();\n  let {\n    setID,\n    changeHandler,\n    selectedSegments\n  } = _ref;\n  const [containsInvalidSegments, setContainsInvalidSegments] = useState(false);\n  const [invalidSegments, setInvalidSegments] = useState([]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [\"Set \", setID]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        size: \"lg\",\n        placeholder: \"e.g. m, n, \\u014B\",\n        onChange: e => {\n          changeHandler(e.target.value, setID);\n          const [contains, s] = checkForInvalidSegments(e.target.value.split(stringSplitter).map(s => s.trim()));\n          setContainsInvalidSegments(contains);\n          setInvalidSegments(s);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), selectedSegments.length == 0 && /*#__PURE__*/_jsxDEV(Form.Text, {\n        children: \"Enter IPA segments separated by punctuation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), containsInvalidSegments && /*#__PURE__*/_jsxDEV(Form.Text, {\n        children: [\"The following segment(s) are not recognised:\", invalidSegments.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s2(SegmentSelector, \"fpBR5Ewa17XIGk3eoTaKxYgy9qo=\");\n_c2 = SegmentSelector;\nfunction getCommonFeatures(segments) {\n  let commonFeatureValues = {};\n  for (let feature of features) {\n    const values = new Set();\n    for (let segment of segments) {\n      values.add(distinctiveFeatures[segment][feature]);\n    }\n    if (values.size == 1) {\n      commonFeatureValues[feature] = values.values().next().value;\n    }\n  }\n  return commonFeatureValues;\n}\nfunction SegmentDisplayer(_ref2) {\n  let {\n    segments\n  } = _ref2;\n  if (segments.length == 0) {\n    return;\n  }\n  const commonFeatureValues = getCommonFeatures(segments);\n  if (Object.keys(commonFeatureValues).length == 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"These segments have no features in common!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Common features include:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.keys(commonFeatureValues).map(k => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: commonFeatureValues[k] + k\n      }, k, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 51\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_c3 = SegmentDisplayer;\nfunction DifferenceDisplayer(_ref3) {\n  let {\n    setA,\n    setB\n  } = _ref3;\n  if (setA.length == 0 && setB.length == 0) {\n    return;\n  }\n  if (setA.length > 0 && setB.length > 0) {\n    const commonFeatureValuesA = getCommonFeatures(setA);\n    const commonFeatureValuesB = getCommonFeatures(setB);\n    if (Object.keys(commonFeatureValuesA).length > 0 && Object.keys(commonFeatureValuesA).length > 0) {\n      let differences = [];\n      let uniques = [];\n      for (let feature of Object.keys(commonFeatureValuesA)) {\n        if (feature in commonFeatureValuesB && commonFeatureValuesB[feature] != commonFeatureValuesA[feature]) {\n          differences.push(feature);\n        }\n        if (!(feature in commonFeatureValuesB)) {\n          uniques.push({\n            \"feature\": feature,\n            \"value\": commonFeatureValuesA[feature]\n          });\n        }\n      }\n      if (differences.length > 0) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Features distinguishing set A from set B:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: differences.map(d => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: d\n            }, d, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this);\n      }\n      if (uniques.length > 0) {\n        // count how important each unique is\n        let featureExclusions = {};\n        for (let feature of uniques) {\n          // count how many segments in B that this feature of A rules out\n          let exclusions = [];\n          for (let segment of setB) {\n            if (distinctiveFeatures[segment][feature[\"feature\"]] != feature[\"value\"]) {\n              exclusions.push(segment);\n            }\n          }\n          featureExclusions[feature[\"feature\"]] = exclusions.slice();\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Common features of A that are not common to B:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: uniques.map(x => {\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: x[\"value\"] + x[\"feature\"] + \" (distinguishes A from \" + featureExclusions[x[\"feature\"]].length + \" segment\" + (featureExclusions[x[\"feature\"]].length > 1 ? \"s\" : \"\") + \" in B)\"\n              }, x[\"feature\"], false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No features distinguish these two sets of segments.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}\n_c4 = DifferenceDisplayer;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"SegmentSelector\");\n$RefreshReg$(_c3, \"SegmentDisplayer\");\n$RefreshReg$(_c4, \"DifferenceDisplayer\");","map":{"version":3,"names":["logo","Form","useState","React","distinctiveFeatures","Container","Row","Col","Tab","Tabs","jsxDEV","_jsxDEV","features","stringSplitter","App","_s","segmentSetA","setSegmentSetA","segmentSetB","setSegmentSetB","handleSetChange","setInputText","setID","validSegments","segment","split","map","s","trim","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","defaultActiveKey","id","eventKey","title","DifferenceDisplayer","setA","setB","xs","md","SegmentSelector","changeHandler","selectedSegments","SegmentDisplayer","segments","Check","type","label","_c","checkForInvalidSegments","invalidSegments","length","_ref","_s2","containsInvalidSegments","setContainsInvalidSegments","setInvalidSegments","Group","Label","Control","size","placeholder","onChange","e","target","value","contains","Text","join","_c2","getCommonFeatures","commonFeatureValues","feature","values","Set","add","next","_ref2","Object","keys","k","_c3","_ref3","commonFeatureValuesA","commonFeatureValuesB","differences","uniques","d","featureExclusions","exclusions","slice","x","_c4","$RefreshReg$"],"sources":["/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport Form from 'react-bootstrap/Form';\nimport { useState, React} from 'react';\nimport { distinctiveFeatures } from './distinctiveFeatures.js'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst features = [\n  \"syllabic\",\n  \"sonorant\",\n  \"consonantal\",\n  \"continuant\",\n  \"nasal\",\n  \"anterior\",\n  \"coronal\",\n  \"lateral\",\n  \"voice\",\n]\n\nconst stringSplitter = /\\,|\\.|\\/|\\|/;\n\nfunction App() {\n  const [segmentSetA, setSegmentSetA] = useState([]);\n  const [segmentSetB, setSegmentSetB] = useState([]);\n  function handleSetChange(setInputText, setID) {\n    // disregard empty strings or segments not accounted for\n    let validSegments = [];\n    for (let segment of setInputText.split(stringSplitter).map(s => s.trim())) {\n      if (segment && segment in distinctiveFeatures) {\n        validSegments.push(segment);\n      }\n    }\n    if (setID == \"A\") {\n      setSegmentSetA(validSegments)\n    } else if (setID == \"B\") {\n      setSegmentSetB(validSegments)\n    }\n  }\n  return (\n    <div className=\"App\">\n      <Container className=\"app-content\">\n      <Row>\n        <h1>Distinctive features</h1>\n        <Tabs\n          defaultActiveKey=\"segments\"\n          id=\"uncontrolled-tab-example\"\n          className=\"mb-3\"\n        >\n          <Tab eventKey=\"segments\" title=\"features of segments\">\n          <DifferenceDisplayer setA={segmentSetA} setB={segmentSetB}/>\n          <Container>\n            <Row>\n              <Col xs={12} md={6}>\n                <div className=\"set-form\">\n                  <SegmentSelector setID=\"A\" changeHandler={handleSetChange} selectedSegments={segmentSetA}/>\n                  <SegmentDisplayer segments={segmentSetA}/>\n                </div>\n              </Col>\n              <Col xs={12} md={6}>\n                <div className=\"set-form\">\n                  <SegmentSelector setID=\"B\" changeHandler={handleSetChange} selectedSegments={segmentSetB}/>\n                  <SegmentDisplayer segments={segmentSetB}/>\n                </div>\n              </Col>\n            </Row>\n          </Container>\n          </Tab>\n          <Tab eventKey=\"features\" title=\"natural classes\">\n            Something else will go here.<br/>\n            <Form.Check\n              type=\"switch\"\n              id=\"custom-switch\"\n              label=\"syllabic\"\n            />\n          </Tab>\n        </Tabs>\n      </Row>\n      </Container>\n    </div>\n  );\n}\n\nfunction checkForInvalidSegments(segments) {\n  if (! segments) {\n    return [false, []]\n  }\n  let invalidSegments = [];\n  for (let segment of segments) {\n    if (segment != \"\" && (! (segment in distinctiveFeatures))) {\n      invalidSegments.push(segment);\n    }\n  }\n  if (invalidSegments.length == 0) {\n    return [false, []]\n  }\n  return [true, invalidSegments]\n}\n\nfunction SegmentSelector( { setID, changeHandler, selectedSegments }) {\n  const [containsInvalidSegments, setContainsInvalidSegments] = useState(false);\n  const [invalidSegments, setInvalidSegments] = useState([]);\n  return (\n    <Form>\n      <Form.Group>\n        <Form.Label>Set {setID}</Form.Label>\n        <Form.Control\n          type=\"text\"\n          size=\"lg\"\n          placeholder=\"e.g. m, n, ŋ\"\n          onChange={e => {\n            changeHandler(e.target.value, setID);\n            const [contains, s] = checkForInvalidSegments(e.target.value.split(stringSplitter).map(s => s.trim()));\n            setContainsInvalidSegments(contains);\n            setInvalidSegments(s);\n          }}\n          />\n        {\n          selectedSegments.length == 0 &&\n          <Form.Text>\n            Enter IPA segments separated by punctuation\n          </Form.Text>\n        }\n        {\n          containsInvalidSegments &&\n          <Form.Text>\n          The following segment(s) are not recognised:\n          {invalidSegments.join(\", \")}\n          </Form.Text>\n        }\n      </Form.Group>\n    </Form>\n  )\n}\n\nfunction getCommonFeatures(segments) {\n  let commonFeatureValues = {};\n  for (let feature of features) {\n    const values = new Set();\n    for (let segment of segments) {\n      values.add(distinctiveFeatures[segment][feature])\n    }\n    if (values.size == 1) {\n      commonFeatureValues[feature] = values.values().next().value;\n    }\n  }\n  return commonFeatureValues;\n}\n\nfunction SegmentDisplayer( { segments }) {\n  if (segments.length == 0) {\n    return\n  }\n  const commonFeatureValues = getCommonFeatures(segments);\n  if (Object.keys(commonFeatureValues).length == 0) {\n    return (\n      <div>\n        These segments have no features in common!\n      </div>\n    )\n  }\n  return (\n    <div>\n      Common features include:\n      <ul>\n      {\n        Object.keys(commonFeatureValues).map(k => <li key={k}>{commonFeatureValues[k] + k}</li>)\n      }\n      </ul>\n    </div>\n  )\n}\n\nfunction DifferenceDisplayer( { setA, setB }) {\n  if (setA.length == 0 && setB.length == 0) {\n    return\n  }\n  if (setA.length > 0 && setB.length > 0) {\n    const commonFeatureValuesA = getCommonFeatures(setA);\n    const commonFeatureValuesB = getCommonFeatures(setB);\n    if (Object.keys(commonFeatureValuesA).length > 0 && Object.keys(commonFeatureValuesA).length > 0) {\n      let differences = [];\n      let uniques = [];\n      for (let feature of Object.keys(commonFeatureValuesA)) {\n        if (feature in commonFeatureValuesB && commonFeatureValuesB[feature] != commonFeatureValuesA[feature]) {\n          differences.push(feature);\n        }\n        if (!(feature in commonFeatureValuesB)) {\n          uniques.push({\"feature\" : feature, \"value\" : commonFeatureValuesA[feature]});\n        }\n      }\n      if (differences.length > 0) {\n        return (\n          <div>\n            Features distinguishing set A from set B:\n            <ul>\n              {differences.map(d => <li key={d}>{d}</li>)}\n            </ul>\n          </div>\n        )\n      }\n      if (uniques.length > 0) {\n        // count how important each unique is\n        let featureExclusions = {};\n        for (let feature of uniques) {\n          // count how many segments in B that this feature of A rules out\n          let exclusions = [];\n          for (let segment of setB) {\n            if (distinctiveFeatures[segment][feature[\"feature\"]] != feature[\"value\"]) {\n              exclusions.push(segment);\n            }\n          }\n          featureExclusions[feature[\"feature\"]] = exclusions.slice();\n        }\n        return (\n          <div>\n            Common features of A that are not common to B:\n            <ul>\n              {uniques.map(x => {\n                return (\n                  <li key={x[\"feature\"]}>\n                    {x[\"value\"] + x[\"feature\"] + \" (distinguishes A from \" + featureExclusions[x[\"feature\"]].length + \" segment\" + (featureExclusions[x[\"feature\"]].length > 1? \"s\" : \"\") + \" in B)\"}\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        )\n      }\n    }\n  }\n  return (\n    <div>No features distinguish these two sets of segments.</div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}