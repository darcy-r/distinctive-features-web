[{"/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/index.js":"1","/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/reportWebVitals.js":"2","/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/App.js":"3","/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/distinctiveFeatures.js":"4"},{"size":535,"mtime":1683341993966,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1683341993966,"results":"7","hashOfConfig":"6"},{"size":9671,"mtime":1683589223758,"results":"8","hashOfConfig":"6"},{"size":7484,"mtime":1683447851467,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"158p4jj",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/index.js",[],[],[],"/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/reportWebVitals.js",[],[],"/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/App.js",["24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42"],[],"import logo from './logo.svg';\nimport Form from 'react-bootstrap/Form';\nimport { useState, React} from 'react';\nimport { distinctiveFeatures } from './distinctiveFeatures.js'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Alert from 'react-bootstrap/Alert';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst features = [\n  \"syllabic\",\n  \"sonorant\",\n  \"consonantal\",\n  \"continuant\",\n  \"nasal\",\n  \"anterior\",\n  \"coronal\",\n  \"lateral\",\n  \"voice\",\n]\n\nconst stringSplitter = /\\,|\\.|\\/|\\|/;\n\nfunction App() {\n  const [segmentSetA, setSegmentSetA] = useState([]);\n  const [segmentSetB, setSegmentSetB] = useState([]);\n  const [naturalClasses, setNaturalClasses] = useState({});\n  function handleSetChange(setInputText, setID) {\n    // disregard empty strings or segments not accounted for\n    let validSegments = [];\n    for (let segment of setInputText.split(stringSplitter).map(s => s.trim())) {\n      if (segment && segment in distinctiveFeatures) {\n        validSegments.push(segment);\n      }\n    }\n    if (setID == \"A\") {\n      setSegmentSetA(validSegments)\n    } else if (setID == \"B\") {\n      setSegmentSetB(validSegments)\n    }\n  }\n  function handleClassChange(selected, feature, value) {\n    let updateObj = Object.assign({}, naturalClasses);\n    if (!selected) {\n      delete updateObj[feature];\n    } else {\n      updateObj[feature] = value;\n    }\n    setNaturalClasses(updateObj);\n  }\n  return (\n    <div className=\"App\">\n      <Container className=\"app-content\">\n      <Row>\n        <h1>Distinctive features</h1>\n        <Tabs\n          defaultActiveKey=\"features\"\n          className=\"mb-3\"\n        >\n          <Tab eventKey=\"features\" title=\"natural classes\">\n            <NaturalClassDisplayer classFeatures={naturalClasses}/>\n            <div>\n              <p>Create natural classes by selecting distinctive features below:</p>\n            </div>\n            {features.map(f => <NaturalClassSelector feature={f} key={f} changeHandler={handleClassChange}/>)}\n          </Tab>\n          <Tab eventKey=\"segments\" title=\"features of segments\">\n          <DifferenceDisplayer setA={segmentSetA} setB={segmentSetB}/>\n          <Container>\n            <Row>\n              <Col xs={12} md={6}>\n                <div className=\"set-form\">\n                  <SegmentSelector setID=\"A\" changeHandler={handleSetChange} selectedSegments={segmentSetA}/>\n                  <SegmentDisplayer segments={segmentSetA}/>\n                </div>\n              </Col>\n              <Col xs={12} md={6}>\n                <div className=\"set-form\">\n                  <SegmentSelector setID=\"B\" changeHandler={handleSetChange} selectedSegments={segmentSetB}/>\n                  <SegmentDisplayer segments={segmentSetB}/>\n                </div>\n              </Col>\n            </Row>\n          </Container>\n          </Tab>\n        </Tabs>\n      </Row>\n      </Container>\n    </div>\n  );\n}\n\nfunction NaturalClassSelector( { feature, changeHandler } ) {\n  const [selected, setSelected] = useState(false);\n  const [selectedFeatureValue, setSelectedFeatureValue] = useState(\"+\");\n  return (\n    <Form>\n      <Form.Group>\n        <Form.Check\n          inline\n          type=\"switch\"\n          label={feature}\n          onChange={() => {\n            setSelected(!selected);\n            changeHandler(!selected, feature, selectedFeatureValue);\n          }}\n          className=\"feature-check\"\n        />\n        <Form.Check\n          inline\n          type=\"radio\"\n          disabled={!selected}\n          checked={selectedFeatureValue == \"+\"}\n          onChange={() => {\n            setSelectedFeatureValue(\"+\");\n            changeHandler(selected, feature, \"+\");\n          }}\n          label=\"+\"\n        />\n        <Form.Check\n          inline\n          type=\"radio\"\n          disabled={!selected}\n          checked={selectedFeatureValue == \"-\"}\n          onChange={() => {\n            setSelectedFeatureValue(\"-\");\n            changeHandler(selected, feature, \"-\");\n          }}\n          label=\"-\"\n        />\n      </Form.Group>\n    </Form>\n  )\n}\n\nfunction NaturalClassDisplayer( { classFeatures } ) {\n  if (Object.keys(classFeatures).length == 0) {\n    return (\n      <Alert variant=\"light\">\n        <i>segments will appear once features have been selected</i>\n      </Alert>\n    )\n  }\n  let segmentsToDisplay = [];\n  for (let segment of Object.keys(distinctiveFeatures)) {\n    let segmentQualifies = true;\n    for (let feature of Object.keys(classFeatures)) {\n      if (distinctiveFeatures[segment][feature] != classFeatures[feature]) {\n        segmentQualifies = false;\n      }\n    }\n    if (segmentQualifies) {\n      segmentsToDisplay.push(segment);\n    }\n  }\n  if (segmentsToDisplay.length == 0) {\n    return (\n      <Alert variant=\"warning\">\n        No segments share all the features selected\n      </Alert>\n    )\n  }\n  return (\n    <Alert variant=\"secondary\">\n      {segmentsToDisplay.join(\", \")}\n    </Alert>\n  )\n}\n\nfunction checkForInvalidSegments(segments) {\n  if (! segments) {\n    return [false, []]\n  }\n  let invalidSegments = [];\n  for (let segment of segments) {\n    if (segment != \"\" && (! (segment in distinctiveFeatures))) {\n      invalidSegments.push(segment);\n    }\n  }\n  if (invalidSegments.length == 0) {\n    return [false, []]\n  }\n  return [true, invalidSegments]\n}\n\nfunction SegmentSelector( { setID, changeHandler, selectedSegments }) {\n  const [containsInvalidSegments, setContainsInvalidSegments] = useState(false);\n  const [invalidSegments, setInvalidSegments] = useState([]);\n  return (\n    <Form>\n      <Form.Group>\n        <Form.Label>Set {setID}</Form.Label>\n        <Form.Control\n          type=\"text\"\n          size=\"lg\"\n          placeholder=\"e.g. m, n, Å‹\"\n          onChange={e => {\n            changeHandler(e.target.value, setID);\n            const [contains, s] = checkForInvalidSegments(e.target.value.split(stringSplitter).map(s => s.trim()));\n            setContainsInvalidSegments(contains);\n            setInvalidSegments(s);\n          }}\n          />\n        {\n          selectedSegments.length == 0 &&\n          <Form.Text>\n            Enter IPA segments separated by punctuation\n          </Form.Text>\n        }\n        {\n          containsInvalidSegments &&\n          <Form.Text>\n          The following segment(s) are not recognised:\n          {invalidSegments.join(\", \")}\n          </Form.Text>\n        }\n      </Form.Group>\n    </Form>\n  )\n}\n\nfunction getCommonFeatures(segments) {\n  let commonFeatureValues = {};\n  for (let feature of features) {\n    const values = new Set();\n    for (let segment of segments) {\n      values.add(distinctiveFeatures[segment][feature])\n    }\n    if (values.size == 1) {\n      commonFeatureValues[feature] = values.values().next().value;\n    }\n  }\n  return commonFeatureValues;\n}\n\nfunction SegmentDisplayer( { segments }) {\n  if (segments.length == 0) {\n    return\n  }\n  const commonFeatureValues = getCommonFeatures(segments);\n  if (Object.keys(commonFeatureValues).length == 0) {\n    return (\n      <div>\n        These segments have no features in common!\n      </div>\n    )\n  }\n  return (\n    <div>\n      Common features include:\n      <ul>\n      {\n        Object.keys(commonFeatureValues).map(k => <li key={k}>{commonFeatureValues[k] + k}</li>)\n      }\n      </ul>\n    </div>\n  )\n}\n\nfunction DifferenceDisplayer( { setA, setB }) {\n  if (setA.length == 0 && setB.length == 0) {\n    return\n  }\n  if (setA.length > 0 && setB.length > 0) {\n    const commonFeatureValuesA = getCommonFeatures(setA);\n    const commonFeatureValuesB = getCommonFeatures(setB);\n    if (Object.keys(commonFeatureValuesA).length > 0 && Object.keys(commonFeatureValuesA).length > 0) {\n      let differences = [];\n      let uniques = [];\n      for (let feature of Object.keys(commonFeatureValuesA)) {\n        if (feature in commonFeatureValuesB && commonFeatureValuesB[feature] != commonFeatureValuesA[feature]) {\n          differences.push(feature);\n        }\n        if (!(feature in commonFeatureValuesB)) {\n          uniques.push({\"feature\" : feature, \"value\" : commonFeatureValuesA[feature]});\n        }\n      }\n      if (differences.length > 0) {\n        return (\n          <div>\n            Features distinguishing set A from set B:\n            <ul>\n              {differences.map(d => <li key={d}>{d}</li>)}\n            </ul>\n          </div>\n        )\n      }\n      if (uniques.length > 0) {\n        // count how important each unique is\n        let featureExclusions = {};\n        for (let feature of uniques) {\n          // count how many segments in B that this feature of A rules out\n          let exclusions = [];\n          for (let segment of setB) {\n            if (distinctiveFeatures[segment][feature[\"feature\"]] != feature[\"value\"]) {\n              exclusions.push(segment);\n            }\n          }\n          featureExclusions[feature[\"feature\"]] = exclusions.slice();\n        }\n        return (\n          <div>\n            Common features of A that are not common to B:\n            <ul>\n              {uniques.map(x => {\n                return (\n                  <li key={x[\"feature\"]}>\n                    {x[\"value\"] + x[\"feature\"] + \" (distinguishes A from \" + featureExclusions[x[\"feature\"]].length + \" segment\" + (featureExclusions[x[\"feature\"]].length > 1? \"s\" : \"\") + \" in B)\"}\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        )\n      }\n    }\n  }\n  return (\n    <div>No features distinguish these two sets of segments.</div>\n  )\n}\n\nexport default App;\n","/Users/darcyroche/Documents/GitHub/distinctive-features-web/src/distinctiveFeatures.js",[],[],{"ruleId":"43","severity":1,"message":"44","line":1,"column":8,"nodeType":"45","messageId":"46","endLine":1,"endColumn":12},{"ruleId":"47","severity":1,"message":"48","line":27,"column":25,"nodeType":"49","messageId":"50","endLine":27,"endColumn":26,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":41,"column":15,"nodeType":"54","messageId":"55","endLine":41,"endColumn":17},{"ruleId":"52","severity":1,"message":"53","line":43,"column":22,"nodeType":"54","messageId":"55","endLine":43,"endColumn":24},{"ruleId":"52","severity":1,"message":"53","line":118,"column":41,"nodeType":"54","messageId":"55","endLine":118,"endColumn":43},{"ruleId":"52","severity":1,"message":"53","line":129,"column":41,"nodeType":"54","messageId":"55","endLine":129,"endColumn":43},{"ruleId":"52","severity":1,"message":"53","line":142,"column":41,"nodeType":"54","messageId":"55","endLine":142,"endColumn":43},{"ruleId":"52","severity":1,"message":"56","line":153,"column":49,"nodeType":"54","messageId":"55","endLine":153,"endColumn":51},{"ruleId":"52","severity":1,"message":"53","line":161,"column":32,"nodeType":"54","messageId":"55","endLine":161,"endColumn":34},{"ruleId":"52","severity":1,"message":"56","line":181,"column":17,"nodeType":"54","messageId":"55","endLine":181,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":185,"column":30,"nodeType":"54","messageId":"55","endLine":185,"endColumn":32},{"ruleId":"52","severity":1,"message":"53","line":210,"column":35,"nodeType":"54","messageId":"55","endLine":210,"endColumn":37},{"ruleId":"52","severity":1,"message":"53","line":234,"column":21,"nodeType":"54","messageId":"55","endLine":234,"endColumn":23},{"ruleId":"52","severity":1,"message":"53","line":242,"column":23,"nodeType":"54","messageId":"55","endLine":242,"endColumn":25},{"ruleId":"52","severity":1,"message":"53","line":246,"column":47,"nodeType":"54","messageId":"55","endLine":246,"endColumn":49},{"ruleId":"52","severity":1,"message":"53","line":266,"column":19,"nodeType":"54","messageId":"55","endLine":266,"endColumn":21},{"ruleId":"52","severity":1,"message":"53","line":266,"column":39,"nodeType":"54","messageId":"55","endLine":266,"endColumn":41},{"ruleId":"52","severity":1,"message":"56","line":276,"column":78,"nodeType":"54","messageId":"55","endLine":276,"endColumn":80},{"ruleId":"52","severity":1,"message":"56","line":300,"column":66,"nodeType":"54","messageId":"55","endLine":300,"endColumn":68},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\,.","Literal","unnecessaryEscape",["57","58"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",{"messageId":"59","fix":"60","desc":"61"},{"messageId":"62","fix":"63","desc":"64"},"removeEscape",{"range":"65","text":"66"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"67","text":"68"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[665,666],"",[665,665],"\\"]